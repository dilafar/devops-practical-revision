#!/usr/bin/env groovy

library identifier: 'jenkins-shared-library@master', retriever: modernSCM(
    [
        $class: 'GitSCMSource',
        remote: 'https://github.com/dilafar/jenkins-shared-library.git',
        credentialsId: 'github-credentials'
    ]
)

def gv

pipeline{
    agent any

    tools {
        maven 'Maven'
    }

    stages{
        stage("increment version"){
            steps {
                script {
                    echo 'incrementing app version...'
                    incrementPatchVersion()
                    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                    def version = matcher[0][1]
                    env.IMAGE_NAME = "$version-$BUILD_NUMBER"
                }
            }
        }

        stage("build jar"){
            steps {
                script {
                    buildApp()
                }
            }
        }
        stage("test"){
            steps {
               script {
                    testApp()
               }
            }
        }
        stage("build image"){
            steps {
                script {
                    buildImage("dilafar/demo-app:$IMAGE_NAME")
                    dockerLogin()
                    dockerPush("dilafar/demo-app:$IMAGE_NAME")
                }
            }
        }
        stage("provision server"){
            environment {
                AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
                TF_VAR_env_prefix = 'test'
            }
            steps {
                script {
                    dir('terraform'){
                        sh "terraform init"
                        sh "terraform fmt"
                        sh "terraform validate"
                        sh "terraform apply --auto-approve"
                        EC2_PUBLIC_IP = sh(
                            script: "terraform output ec2_public_ip",
                            returnStdout: true
                        ).trim()
                    }
                }
            }
        }
        stage("deploy"){
            environment {
                DOCKER_CREDS = credentials('docker-hub-repo')
            }
            steps {
                script {
                    echo "waiting for EC2 server to initialize"
                    sleep(time: 90, unit: "SECONDS")
                    echo 'deploying docker image to EC2...'
                    echo "${EC2_PUBLIC_IP}"
                    def shellCmd = "bash ./commands.sh ${IMAGE_NAME} ${DOCKER_CREDS_USR} ${DOCKER_CREDS_PSW}"
                    sshagent(['ec2-server-key']) {
                        sh "scp commands.sh ec2-user@${EC2_PUBLIC_IP}:/home/ec2-user"
                        sh "scp docker-compose.yml ec2-user@${EC2_PUBLIC_IP}:/home/ec2-user"
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@${EC2_PUBLIC_IP} ${shellCmd}"
                   }
                }
            }
        }
    }
}